// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"time"

	"github.com/go-faster/errors"
)

// DeleteNoteNoContent is response for DeleteNote operation.
type DeleteNoteNoContent struct{}

func (*DeleteNoteNoContent) deleteNoteRes() {}

// DeleteNoteNotFound is response for DeleteNote operation.
type DeleteNoteNotFound struct{}

func (*DeleteNoteNotFound) deleteNoteRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

// DeleteUserNotFound is response for DeleteUser operation.
type DeleteUserNotFound struct{}

func (*DeleteUserNotFound) deleteUserRes() {}

// GetNoteNotFound is response for GetNote operation.
type GetNoteNotFound struct{}

func (*GetNoteNotFound) getNoteRes() {}

// GetUserNotFound is response for GetUser operation.
type GetUserNotFound struct{}

func (*GetUserNotFound) getUserRes() {}

// Ref: #/components/schemas/Models.Note
type ModelsNote struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

// GetID returns the value of ID.
func (s *ModelsNote) GetID() int64 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ModelsNote) GetTitle() string {
	return s.Title
}

// GetContent returns the value of Content.
func (s *ModelsNote) GetContent() string {
	return s.Content
}

// SetID sets the value of ID.
func (s *ModelsNote) SetID(val int64) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ModelsNote) SetTitle(val string) {
	s.Title = val
}

// SetContent sets the value of Content.
func (s *ModelsNote) SetContent(val string) {
	s.Content = val
}

func (*ModelsNote) getNoteRes() {}

// Ref: #/components/schemas/Models.User
type ModelsUser struct {
	ID        int64       `json:"id"`
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	CreatedAt OptDateTime `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *ModelsUser) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *ModelsUser) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ModelsUser) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ModelsUser) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *ModelsUser) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ModelsUser) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ModelsUser) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ModelsUser) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

func (*ModelsUser) getUserRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Routes.HealthCheckResponse
type RoutesHealthCheckResponse struct {
	Status    RoutesHealthCheckResponseStatus `json:"status"`
	Timestamp time.Time                       `json:"timestamp"`
	Version   OptString                       `json:"version"`
}

// GetStatus returns the value of Status.
func (s *RoutesHealthCheckResponse) GetStatus() RoutesHealthCheckResponseStatus {
	return s.Status
}

// GetTimestamp returns the value of Timestamp.
func (s *RoutesHealthCheckResponse) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVersion returns the value of Version.
func (s *RoutesHealthCheckResponse) GetVersion() OptString {
	return s.Version
}

// SetStatus sets the value of Status.
func (s *RoutesHealthCheckResponse) SetStatus(val RoutesHealthCheckResponseStatus) {
	s.Status = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RoutesHealthCheckResponse) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVersion sets the value of Version.
func (s *RoutesHealthCheckResponse) SetVersion(val OptString) {
	s.Version = val
}

type RoutesHealthCheckResponseStatus string

const (
	RoutesHealthCheckResponseStatusHealthy RoutesHealthCheckResponseStatus = "healthy"
)

// AllValues returns all RoutesHealthCheckResponseStatus values.
func (RoutesHealthCheckResponseStatus) AllValues() []RoutesHealthCheckResponseStatus {
	return []RoutesHealthCheckResponseStatus{
		RoutesHealthCheckResponseStatusHealthy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoutesHealthCheckResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case RoutesHealthCheckResponseStatusHealthy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoutesHealthCheckResponseStatus) UnmarshalText(data []byte) error {
	switch RoutesHealthCheckResponseStatus(data) {
	case RoutesHealthCheckResponseStatusHealthy:
		*s = RoutesHealthCheckResponseStatusHealthy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
